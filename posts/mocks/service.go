// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	posts "github.com/rodneyosodo/twiga/posts"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, token, postID, comment
func (_m *Service) CreateComment(ctx context.Context, token string, postID string, comment posts.Comment) (posts.Comment, error) {
	ret := _m.Called(ctx, token, postID, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 posts.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Comment) (posts.Comment, error)); ok {
		return rf(ctx, token, postID, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Comment) posts.Comment); ok {
		r0 = rf(ctx, token, postID, comment)
	} else {
		r0 = ret.Get(0).(posts.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, posts.Comment) error); ok {
		r1 = rf(ctx, token, postID, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLike provides a mock function with given fields: ctx, token, postID, like
func (_m *Service) CreateLike(ctx context.Context, token string, postID string, like posts.Like) (posts.Like, error) {
	ret := _m.Called(ctx, token, postID, like)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 posts.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Like) (posts.Like, error)); ok {
		return rf(ctx, token, postID, like)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Like) posts.Like); ok {
		r0 = rf(ctx, token, postID, like)
	} else {
		r0 = ret.Get(0).(posts.Like)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, posts.Like) error); ok {
		r1 = rf(ctx, token, postID, like)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: ctx, token, post
func (_m *Service) CreatePost(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShare provides a mock function with given fields: ctx, token, postID, share
func (_m *Service) CreateShare(ctx context.Context, token string, postID string, share posts.Share) (posts.Share, error) {
	ret := _m.Called(ctx, token, postID, share)

	if len(ret) == 0 {
		panic("no return value specified for CreateShare")
	}

	var r0 posts.Share
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Share) (posts.Share, error)); ok {
		return rf(ctx, token, postID, share)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, posts.Share) posts.Share); ok {
		r0 = rf(ctx, token, postID, share)
	} else {
		r0 = ret.Get(0).(posts.Share)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, posts.Share) error); ok {
		r1 = rf(ctx, token, postID, share)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, roken, id
func (_m *Service) DeleteComment(ctx context.Context, roken string, id string) error {
	ret := _m.Called(ctx, roken, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roken, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLike provides a mock function with given fields: ctx, token, postID
func (_m *Service) DeleteLike(ctx context.Context, token string, postID string) error {
	ret := _m.Called(ctx, token, postID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePost provides a mock function with given fields: ctx, token, id
func (_m *Service) DeletePost(ctx context.Context, token string, id string) error {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShare provides a mock function with given fields: ctx, token, postID
func (_m *Service) DeleteShare(ctx context.Context, token string, postID string) error {
	ret := _m.Called(ctx, token, postID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAllComments provides a mock function with given fields: ctx, token, page
func (_m *Service) RetrieveAllComments(ctx context.Context, token string, page posts.Page) (posts.CommentsPage, error) {
	ret := _m.Called(ctx, token, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllComments")
	}

	var r0 posts.CommentsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) (posts.CommentsPage, error)); ok {
		return rf(ctx, token, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) posts.CommentsPage); ok {
		r0 = rf(ctx, token, page)
	} else {
		r0 = ret.Get(0).(posts.CommentsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Page) error); ok {
		r1 = rf(ctx, token, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllLikes provides a mock function with given fields: ctx, token, page
func (_m *Service) RetrieveAllLikes(ctx context.Context, token string, page posts.Page) (posts.LikesPage, error) {
	ret := _m.Called(ctx, token, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllLikes")
	}

	var r0 posts.LikesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) (posts.LikesPage, error)); ok {
		return rf(ctx, token, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) posts.LikesPage); ok {
		r0 = rf(ctx, token, page)
	} else {
		r0 = ret.Get(0).(posts.LikesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Page) error); ok {
		r1 = rf(ctx, token, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllPosts provides a mock function with given fields: ctx, token, page
func (_m *Service) RetrieveAllPosts(ctx context.Context, token string, page posts.Page) (posts.PostsPage, error) {
	ret := _m.Called(ctx, token, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllPosts")
	}

	var r0 posts.PostsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) (posts.PostsPage, error)); ok {
		return rf(ctx, token, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) posts.PostsPage); ok {
		r0 = rf(ctx, token, page)
	} else {
		r0 = ret.Get(0).(posts.PostsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Page) error); ok {
		r1 = rf(ctx, token, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllShares provides a mock function with given fields: ctx, token, page
func (_m *Service) RetrieveAllShares(ctx context.Context, token string, page posts.Page) (posts.SharesPage, error) {
	ret := _m.Called(ctx, token, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllShares")
	}

	var r0 posts.SharesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) (posts.SharesPage, error)); ok {
		return rf(ctx, token, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Page) posts.SharesPage); ok {
		r0 = rf(ctx, token, page)
	} else {
		r0 = ret.Get(0).(posts.SharesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Page) error); ok {
		r1 = rf(ctx, token, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCommentByID provides a mock function with given fields: ctx, token, id
func (_m *Service) RetrieveCommentByID(ctx context.Context, token string, id string) (posts.Comment, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCommentByID")
	}

	var r0 posts.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (posts.Comment, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) posts.Comment); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(posts.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrievePostByID provides a mock function with given fields: ctx, token, id
func (_m *Service) RetrievePostByID(ctx context.Context, token string, id string) (posts.Post, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePostByID")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (posts.Post, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) posts.Post); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, token, comment
func (_m *Service) UpdateComment(ctx context.Context, token string, comment posts.Comment) (posts.Comment, error) {
	ret := _m.Called(ctx, token, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 posts.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Comment) (posts.Comment, error)); ok {
		return rf(ctx, token, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Comment) posts.Comment); ok {
		r0 = rf(ctx, token, comment)
	} else {
		r0 = ret.Get(0).(posts.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Comment) error); ok {
		r1 = rf(ctx, token, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: ctx, token, post
func (_m *Service) UpdatePost(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostContent provides a mock function with given fields: ctx, token, post
func (_m *Service) UpdatePostContent(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostContent")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostImageURL provides a mock function with given fields: ctx, token, post
func (_m *Service) UpdatePostImageURL(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostImageURL")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostTags provides a mock function with given fields: ctx, token, post
func (_m *Service) UpdatePostTags(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostTags")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostVisibility provides a mock function with given fields: ctx, token, post
func (_m *Service) UpdatePostVisibility(ctx context.Context, token string, post posts.Post) (posts.Post, error) {
	ret := _m.Called(ctx, token, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostVisibility")
	}

	var r0 posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) (posts.Post, error)); ok {
		return rf(ctx, token, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, posts.Post) posts.Post); ok {
		r0 = rf(ctx, token, post)
	} else {
		r0 = ret.Get(0).(posts.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, posts.Post) error); ok {
		r1 = rf(ctx, token, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
