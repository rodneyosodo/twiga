// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	users "github.com/rodneyosodo/twiga/users"
	mock "github.com/stretchr/testify/mock"
)

// PreferencesRepository is an autogenerated mock type for the PreferencesRepository type
type PreferencesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, preference
func (_m *PreferencesRepository) Create(ctx context.Context, preference users.Preference) (users.Preference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 users.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) (users.Preference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) users.Preference); ok {
		r0 = rf(ctx, preference)
	} else {
		r0 = ret.Get(0).(users.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, users.Preference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *PreferencesRepository) Delete(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAll provides a mock function with given fields: ctx, page
func (_m *PreferencesRepository) RetrieveAll(ctx context.Context, page users.Page) (users.PreferencesPage, error) {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 users.PreferencesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, users.Page) (users.PreferencesPage, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, users.Page) users.PreferencesPage); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Get(0).(users.PreferencesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, users.Page) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByUserID provides a mock function with given fields: ctx, userID
func (_m *PreferencesRepository) RetrieveByUserID(ctx context.Context, userID string) (users.Preference, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByUserID")
	}

	var r0 users.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (users.Preference, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) users.Preference); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(users.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, preference
func (_m *PreferencesRepository) Update(ctx context.Context, preference users.Preference) (users.Preference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 users.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) (users.Preference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) users.Preference); ok {
		r0 = rf(ctx, preference)
	} else {
		r0 = ret.Get(0).(users.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, users.Preference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: ctx, preference
func (_m *PreferencesRepository) UpdateEmail(ctx context.Context, preference users.Preference) (users.Preference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 users.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) (users.Preference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) users.Preference); ok {
		r0 = rf(ctx, preference)
	} else {
		r0 = ret.Get(0).(users.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, users.Preference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePush provides a mock function with given fields: ctx, preference
func (_m *PreferencesRepository) UpdatePush(ctx context.Context, preference users.Preference) (users.Preference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePush")
	}

	var r0 users.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) (users.Preference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, users.Preference) users.Preference); ok {
		r0 = rf(ctx, preference)
	} else {
		r0 = ret.Get(0).(users.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, users.Preference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPreferencesRepository creates a new instance of PreferencesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPreferencesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PreferencesRepository {
	mock := &PreferencesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
